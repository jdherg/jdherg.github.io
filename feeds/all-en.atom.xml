<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>John Hergenroeder</title><link href="http://dev.jdherg.com/" rel="alternate"></link><link href="http://dev.jdherg.com/feeds/all-en.atom.xml" rel="self"></link><id>http://dev.jdherg.com/</id><updated>2015-07-20T06:35:00-05:00</updated><entry><title>The Recurse Center: A Q&amp;A for Past Me</title><link href="http://dev.jdherg.com/posts/2015/07/20/the-recurse-center-a-qa-for-past-me/" rel="alternate"></link><updated>2015-07-20T06:35:00-05:00</updated><author><name></name></author><id>tag:dev.jdherg.com,2015-07-20:posts/2015/07/20/the-recurse-center-a-qa-for-past-me/</id><summary type="html">&lt;p&gt;This spring, I spent three months at &lt;a href="https://www.recurse.com/"&gt;the Recurse Center&lt;/a&gt;. It's an experience that's hard to explain succinctly -- the best attempts I've seen refer to it as "a writer's retreat, but for programmers." I also referred to it as my sabbatical: I had been working as a software engineer at the same company since graduating from undergrad three and a half years earlier, and I was ready to see what other parts of the industry were like. Spending three months at the Recurse Center sounded like a great way to transition between the job I was in and whatever I chose to do next.&lt;/p&gt;
&lt;p&gt;Between making the decision to apply and showing up for my batch, I did a lot of research into what the program is like. That research was mostly searching for the blogs of Recurse Center (or, at the time, &lt;a href="https://www.recurse.com/blog/77-hacker-school-is-now-the-recurse-center"&gt;Hacker School&lt;/a&gt;) alumni and trying to extract whatever tidbits of information I could from them. There were still some things that I was curious about, though, and I didn't want to spend all of my time bugging the few alumni I knew, so my curiosity often went unsatisfied.&lt;/p&gt;
&lt;p&gt;This blog post is for that past me (or for anyone else who also deals with nerves by researching and overpreparing). A lot of it will overlap with the FAQ, the Manual, and other sources, but I'll try to fill some of it in with my personal experience where I can.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; Of course, RC is a constantly shifting experiment, so some of my experience might not accurately reflect how things work now.&lt;/p&gt;
&lt;h2&gt;Applying&lt;/h2&gt;
&lt;h3&gt;What's the application like?&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://www.recurse.com/apply"&gt;application is here&lt;/a&gt;. I included links to this blog and my GitHub, Twitter, and LinkedIn accounts. My CracklePop was in &lt;a href="http://hylang.org/"&gt;Hy&lt;/a&gt; and the program I linked to was &lt;a href="https://github.com/jdherg/pyet"&gt;Pyet&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;What about the rest of the process?&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://www.recurse.com/faq"&gt;FAQ&lt;/a&gt; goes into great detail about this. The first interview is a casual conversation that ranges over a lot of the stuff in your application -- what are your interests, what do you want to work on, why are you applying to RC. I did mine with &lt;a href="https://twitter.com/riotonthebay"&gt;Zach&lt;/a&gt;, and the experience was so low stress that all I remember about it is that Zach was very friendly and it was very pleasant. (Thanks, Zach!). The second interview is pair programming on something you wrote. I paired with &lt;a href="https://twitter.com/davidbalbert"&gt;Dave&lt;/a&gt; on refactoring my &lt;a href="https://github.com/jdherg/redactron"&gt;Redactron NaNoGenMo project&lt;/a&gt;. I was very nervous -- I think at one point I forgot how to reverse a sequence in Python using a slice. Despite my nerves, working with Dave was a lot of fun. (Thanks, Dave!)&lt;/p&gt;
&lt;h3&gt;What's the timeline on all of this stuff?&lt;/h3&gt;
&lt;p&gt;The folks at RC respond as promptly as they can (and guarantee a response within three weeks of your application submission). If you're asked to interview, the timeline will vary a lot depending on things like how open your schedule is for interviews and how swamped the RC folks are.&lt;/p&gt;
&lt;p&gt;My timeline looked like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Day 0: Submit application&lt;/li&gt;
&lt;li&gt;Day 3: Asked to schedule 1st interview&lt;/li&gt;
&lt;li&gt;Day 16: 1st interview&lt;/li&gt;
&lt;li&gt;Day 17: Asked to schedule 2nd interview&lt;/li&gt;
&lt;li&gt;Day 19: 2nd interview&lt;/li&gt;
&lt;li&gt;Day 19: Accepted&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The big gap in getting to the first interview was because of schedule conflicts&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; -- everything on the RC side was very prompt.&lt;/p&gt;
&lt;h3&gt;What is the admissions process looking for?&lt;/h3&gt;
&lt;p&gt;The docs are a little more circumspect about this one, so prepare for wild speculation.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; Trying to reverse engineer it from my experience so far meeting Recursers, the process seems to look at two very broad things:&lt;/p&gt;
&lt;p&gt;Will you be able to guide your own growth as a programmer? There are lots of people at RC (faculty, the members of your batch and the batches you overlap with, alumni, and residents) who will be happy to help you learn what you'd like to, but you're ultimately responsible for deciding what that is and then actually going about doing it. &lt;/p&gt;
&lt;p&gt;Will you be a good community member? You're going to spend three months in close proximity to a few dozen other people, and another month and a half each with the batches immediately ahead of and after you. Are you going to support the people around you? Will you be fun to pair with even when things get challenging? Are you still kind when you get frustrated?&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; Will you follow the social rules to the best of your abilities to help make sure other folks have a safe space to learn in?&lt;/p&gt;
&lt;p&gt;Of course, there are a lot of other factors that can come into play (if nothing else, there's only so much room in the space and so batches can only be so big). With that said, the Recursers I've met so far have had a wide variety of backgrounds but all fit that broad pattern: they're all intellectually curious people who want to be better programmers, and they collectively form the most welcoming and friendly community I've been a part of. If you're interested in spending time at RC, fitting that pattern can't hurt.&lt;/p&gt;
&lt;h2&gt;Between Acceptance and Arrival&lt;/h2&gt;
&lt;h3&gt;What happens once you're accepted?&lt;/h3&gt;
&lt;p&gt;In terms of RC things, once you've confirmed, you  just wait. A couple of weeks before your batch, you'll gain access to some of the subforums of the internal forum -- specifically, "Welcome" for introducing yourself and "Housing" to help out with the housing hunt if you still haven't found a place. At this point, you'll also be able to see some RCer-only sections of &lt;a href="https://www.recurse.com/manual"&gt;the Manual&lt;/a&gt;. You'll gain access to the rest of the forum, the internal chat, and a bunch of other fun things on the first day.&lt;/p&gt;
&lt;h2&gt;Living in NYC&lt;/h2&gt;
&lt;h3&gt;How do I find housing?&lt;/h3&gt;
&lt;p&gt;Most Recursers end up subletting. There are lots of ways to find sublets, including &lt;a href="http://www.airbnb.com/"&gt;AirBnB&lt;/a&gt;, &lt;a href="https://newyork.craigslist.org/"&gt;Craigslist&lt;/a&gt;, and &lt;a href="https://www.listingsproject.com/"&gt;The Listings Project&lt;/a&gt;. Alumni and current Recursers will also post in the Housing subforum when they find out about housing options that may be a good fit for the incoming batch.&lt;/p&gt;
&lt;h3&gt;Where's RC and how do I get there?&lt;/h3&gt;
&lt;p&gt;The docs don't get more specific than "near the intersection of Broadway and Grand St in Manhattan," so I won't either. It's easy walking distance from lots of subway lines (among others, the A, C, E, J, N, Q, R, Z, 6 on Canal) and when the weather cooperates many Recursers choose to commute in by bicycle instead.&lt;/p&gt;
&lt;h3&gt;How much time is there to explore the city?&lt;/h3&gt;
&lt;p&gt;A lot and too little. Fridays are optional, so you have three day weekends whenever you want them. With that said, I found that I barely checked anything off of my NYC tourist list -- I just spent too much time working on projects, hanging out with Recursers, and recovering from spending the week working and hanging out.&lt;/p&gt;
&lt;h2&gt;Life at RC&lt;/h2&gt;
&lt;h3&gt;When are people at RC?&lt;/h3&gt;
&lt;p&gt;Normal hours are 10:30a to 6:30p from Monday to Thursday, but Recursers in current batches have 24/7 access to the space and in practice there are often people in the space at all hours of the night and day.&lt;/p&gt;
&lt;h3&gt;What do people bring to RC?&lt;/h3&gt;
&lt;p&gt;Everyone brings something to program with. Beyond that, it's all about what will make your workspace comfortable and keep you happy and learning. What that means can vary a lot, but it sometimes includes things like headphones or external mice and keyboards. There are cubbies in the space to store things, and people will often leave gear on the tables overnight.&lt;/p&gt;
&lt;h3&gt;What do people eat?&lt;/h3&gt;
&lt;p&gt;Some folks bring their lunches in (there's a fridge and a microwave in the space), but there are also usually at least a couple of lunch groups that will coordinate over the internal chat and fetch lunch from nearby restaurants.&lt;/p&gt;
&lt;h3&gt;How strict is the time commitment?&lt;/h3&gt;
&lt;p&gt;While you're expected to be in the space during the normal hours (in for checkins at 10:30a and not out until after 6ish in the afternoon) from Monday to Thursday, the community recognizes both that life can get complicated and that self-care is important. No-one will judge you if you have some errand that's time-sensitive to run during the day or if you need to take a day off to recover from a particularly intense week.&lt;/p&gt;
&lt;h3&gt;What about the social rules?&lt;/h3&gt;
&lt;p&gt;The manual's &lt;a href="https://www.recurse.com/manual#sub-sec-social-rules"&gt;section on social rules&lt;/a&gt; does a great job of covering it. In practice, the rules are easy to internalize and Recursers are excellent at catching themselves when they slip up on one of the rules. On the other hand, mistakes still happen -- I know that there are some habits I've found hard to break.&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; Luckily, corrections are usually quick, direct, and unobtrusive -- no-one wants to shame you if you make a mistake.&lt;/p&gt;
&lt;h3&gt;How long does it take to get the hang of things?&lt;/h3&gt;
&lt;p&gt;This is something that varies a lot too! Nearly everyone I've spoken to agrees that the first week or two get spent being overwhelmed by the new experience. Beyond that, Recursers I've talked to have said they felt like they really hit their stride as early as right after that initial introductory period to as late as the last couple of weeks. I didn't feel like I was really productive until about halfway through my batch, and I've heard that echoed often. The nice thing is that the skills you work on at RC often translate well to being productive out in the world, so you can have your epiphany on the last day and still gain a lot from it.&lt;/p&gt;
&lt;h2&gt;Never Graduating&lt;/h2&gt;
&lt;h3&gt;What does being an alum look like?&lt;/h3&gt;
&lt;p&gt;This is something I'm still working on figuring out! There are lots of opportunities to stay engaged, but being an alum is even less structured than being in a batch. Regardless of where you end up or how you choose to stay involved, the internal chat and forums are always available to you, and having that community in easy reach is a powerful tool.&lt;/p&gt;
&lt;h3&gt;Was it worth it?&lt;/h3&gt;
&lt;p&gt;Yes. &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;Other Resources&lt;/h2&gt;
&lt;h3&gt;What are those blogs you used to learn more about RC?&lt;/h3&gt;
&lt;p&gt;There were lots! Here are some that I found particularly useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jvns.ca/blog/categories/hackerschool/"&gt;Julia Evans' Hacker School posts&lt;/a&gt;&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mathamy.com/tag/hacker-school.html"&gt;Amy Hanlon's Hacker School posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.harihareswara.net/nb/nb.cgi/category/sumana/Hacker%20School"&gt;Sumana Harihareswara's Hacker School posts&lt;/a&gt;&lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://akaptur.com/"&gt;Facilitator emeritus Allison Kaptur's blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;This isn't the retrospective reflection on my experience post (or "return statement"). That comes later!&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Holidays.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Seriously, I've only been involved in the process as a candidate. Nothing official here.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Via &lt;a href="https://twitter.com/li3n3"&gt;Liene Verzemnieks&lt;/a&gt; -- "One of my other personal conclusions was that the interview process also looks for 'What happens when you are frustrated? Are you still kind?' and 'Are you excited about this?'"&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;Sometimes I accidentally say "you guys" instead of "y'all" or "guys" instead of "people" or "folks". If you catch me at it or breaking any of the other social rules, please let me know. I want to be better!&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;Thanks to the magic of chat history, I can pinpoint not only the specific jvns.ca link that kicked off the train of thought that eventually arrived at my decision to apply to the Recurse Center, but also when and from whom I received it. (It was &lt;a href="http://jvns.ca/blog/2014/05/12/computers-are-fast/"&gt;Computers are &lt;em&gt;fast&lt;/em&gt;!&lt;/a&gt; via &lt;a href="https://twitter.com/cmchap"&gt;Cory Chapman&lt;/a&gt; on May 19th, 2014.)&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;I realized later that it was actually Sumana who had indirectly introduced me to RC, I just wasn't paying attention at the time -- it came up in a talk she gave at the PyCon Education Summit way back in April 2014. There are so many people to be grateful toward for getting me to the Recurse Center.&amp;#160;&lt;a class="footnote-backref" href="#fnref:7" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Recurse Center"></category></entry><entry><title>NaNoGenMo2014</title><link href="http://dev.jdherg.com/posts/2014/12/07/nanogenmo2014/" rel="alternate"></link><updated>2014-12-07T23:00:00-06:00</updated><author><name></name></author><id>tag:dev.jdherg.com,2014-12-07:posts/2014/12/07/nanogenmo2014/</id><summary type="html">&lt;p&gt;Since 2000, November has been &lt;a href="http://en.wikipedia.org/wiki/National_Novel_Writing_Month"&gt;National Novel Writing Month&lt;/a&gt; (or NaNoWriMo), a chance for people around the world to hunker down and spend a month writing a 50000 word novel. &lt;a href="https://twitter.com/tinysubversions/status/396305662000775168"&gt;Since 2013&lt;/a&gt;, November has also been National Novel Generation Month (NaNoGenMo), a chance for people around the world to hunker down and spend a month writing a program that generates a 50000 word novel.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/dariusk/NaNoGenMo-2014#the-rules"&gt;NaNoGenMo 2014 Rules&lt;/a&gt; are simple: share a 50k+ word novel (and the source code that generated it). There are no rules on meaningfulness or originality, but there is a request that copyright is respected. Beyond that, anything is fair game.&lt;/p&gt;
&lt;p&gt;This year, with a little extra time during my Thanksgiving vacation, I decided to join the last quarter of NaNoGenMo. With so little time left, I decided my entry would be a little light remixing of existing work.&lt;/p&gt;
&lt;h1&gt;Redactron&lt;/h1&gt;
&lt;h3&gt;Conception&lt;/h3&gt;
&lt;p&gt;In some older novels, authors &lt;a href="http://ask.metafilter.com/72590/Why-censor-town-names"&gt;opted to censor the names of towns and people&lt;/a&gt; for any of a variety of reasons: to avoid accusations of gossip or libel; to give the impression the novel really was gossip and thus had to be censored; or possibly even to aid suspension of disbelief by allowing readers to substitute in places and people they were already familiar with. These days, that sort of censorship evokes a different context -- redaction of documents for public release.&lt;/p&gt;
&lt;p&gt;For my NaNoGenMo experiment, I wanted to make a tool that created that took source texts and censored them, obscuring targeted portions of the input text. For my first run, I decided that I'd try to target proper nouns for redaction. With that goal in mind, &lt;a href="https://github.com/jdherg/redactron"&gt;the Redactron&lt;/a&gt;!&lt;/p&gt;
&lt;h3&gt;Implementation&lt;/h3&gt;
&lt;p&gt;My first instinct was to use this project as an excuse to try out &lt;a href="http://www.nltk.org/"&gt;NLTK&lt;/a&gt;, which has lots of options for &lt;a href="http://www.nltk.org/book/ch05.html"&gt;tagging words&lt;/a&gt;, including identifying parts of speech (like proper nouns!). However, NLTK uses lots and lots of corpora, models, and other data to do their tagging. That wasn't quite the lightweight approach to NaNoGenMo I wanted to take -- it was time to try something simpler.&lt;/p&gt;
&lt;p&gt;Keeping in mind that a perfect result wasn't necessary to create the same general impression as real proper-noun tagging, I went about trying to get as close as I could with just the standard library and very little code on top of it. I settled on a simple approach:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt; &lt;span class="c"&gt;# Split the text into words:&lt;/span&gt;
 &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\W+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="c"&gt;# Pick out the words that are upper case:&lt;/span&gt;
 &lt;span class="n"&gt;upcase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isupper&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
 &lt;span class="c"&gt;#Discard words that appear elsewhere in the text in lower case:&lt;/span&gt;
 &lt;span class="n"&gt;only_up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;upcase&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="c"&gt;#Redact words that remain where they appear. (See repo for details.)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Result&lt;/h3&gt;
&lt;p&gt;That approach actually ended up being pretty successful. Here's a representative passage from Jane Austen's Pride &amp;amp; Prejudice, the text I tested with.&lt;/p&gt;
&lt;p&gt;Original:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Elizabeth Bennet had been obliged, by the scarcity of gentlemen, to sit
down for two dances; and during part of that time, Mr. Darcy had been
standing near enough for her to hear a conversation between him and Mr.
Bingley, who came from the dance for a few minutes, to press his friend
to join it.

&amp;quot;Come, Darcy,&amp;quot; said he, &amp;quot;I must have you dance. I hate to see you
standing about by yourself in this stupid manner. You had much better
dance.&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Redacted:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Exxxxxxxx Bxxxxx had been obliged, by the scarcity of gentlemen, to sit
down for two dances; and during part of that time, Mx. Dxxxx had been
standing near enough for her to hear a conversation between him and Mx.
Bxxxxxx, who came from the dance for a few minutes, to press his friend
to join it.

&amp;quot;Come, Dxxxx,&amp;quot; said he, &amp;quot;I must have you dance. I hate to see you
standing about by yourself in this stupid manner. You had much better
dance.&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not bad! We've successfully obscured the names but not the 'Come' or 'You' that start sentences.&lt;/p&gt;
&lt;h3&gt;Future&lt;/h3&gt;
&lt;p&gt;Of course, there's always room for improvement! A little later in the book is this passage:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&amp;quot;I do not mind his not talking to Mxx. Long,&amp;quot; said Miss Lxxxx, &amp;quot;but I
wish he had danced with Exxxx.&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While most of the identities are obscured there, the unfortunate 'Mxx. Long' has a name that also appears in the text elsewhere as a lowercase word. As it is, the very simple model used for targeting words doesn't do a very good job with names that are also non-name words. A better targeting model might do something like take into account more than one word at a time, or include a list of known titles.&lt;/p&gt;
&lt;p&gt;Even more generally, I'd love to take time to split the implementation details out a bit to make the utility more modular and thereby more customizable. Specifically, I think that providing easy ways to switch between targeting models and to switch between censoring methods could be fun! Redacting random words, every third word, or words beginning with some particular letter could potentially produce results that feel very different. Similarly, different replacement options could produce fun results: 'Elizabeth Bennet of Longbourn' currently becomes 'Exxxxxxxx Bxxxxx of Lxxxxxxxx' but could just as easily become 'ɥʇǝqɐzıןǝ ʇǝuuǝq of uɹnoqbuoן' or (using my recent favorite substitution, nearest &lt;a href="https://github.com/dariusk/corpora/blob/master/data/animals/dinosaurs.json"&gt;dinosaur&lt;/a&gt;) 'Elmisaurus Belodon of Longisquama'. The possibilities are endless!&lt;/p&gt;</summary><category term="Programming"></category><category term="Projects"></category><category term="Python"></category></entry><entry><title>Pyet</title><link href="http://dev.jdherg.com/posts/2014/11/21/pyet/" rel="alternate"></link><updated>2014-11-21T09:00:00-06:00</updated><author><name></name></author><id>tag:dev.jdherg.com,2014-11-21:posts/2014/11/21/pyet/</id><summary type="html">&lt;p&gt;This month I was hunting for a fun Python project I could get done with just the standard library when I read &lt;a href="http://jennmoney.biz/"&gt;Jenn Schiffer&lt;/a&gt;'s &lt;a href="http://vart.institute/mondrian/index.html"&gt;vart.institute article on Piet Mondrian&lt;/a&gt;. The article linked to the &lt;a href="http://www.dangermouse.net/esoteric/piet.html"&gt;Piet Programming Language&lt;/a&gt;. With a limited set of instructions and equally limited state (a source file, a stack, and a few other variables), a toy Piet interpreter in Python sounded like a great fit for my goal!&lt;/p&gt;
&lt;h1&gt;Piet&lt;/h1&gt;
&lt;p&gt;Named after Piet Mondrian, Piet is a language crafted by &lt;a href="http://www.dangermouse.net/"&gt;David Morgan-Mar&lt;/a&gt; that uses abstract art as source code. You can find a thorough discussion of the language at the &lt;a href="http://www.dangermouse.net/esoteric/piet.html"&gt;official Piet page&lt;/a&gt;, but I'll try to sum it up briefly.&lt;/p&gt;
&lt;h3&gt;Execution&lt;/h3&gt;
&lt;p&gt;Piet programs are images treated as sets of discrete blocks of color. A Piet interpreter behaves like a robot traversing the surface of the image: it moves from block to block, executing commands depending on the colors of the blocks it is transitioning between.&lt;/p&gt;
&lt;h4&gt;Navigation&lt;/h4&gt;
&lt;p&gt;At each execution step, the interpreter has to decide which adjacent block to move to next.&lt;/p&gt;
&lt;p&gt;To make that decision, the interpreter uses three pieces of information: its current block, a &lt;em&gt;direction pointer (DP)&lt;/em&gt; that indicates which direction to move next, and a &lt;em&gt;codel chooser (CC)&lt;/em&gt; it uses to choose between blocks if there are multiple options adjacent to the current block in that direction.&lt;/p&gt;
&lt;p&gt;The interpreter first finds the edge of the current block which is furthest in the direction of the DP, then uses the CC to select a block adjacent to the current block on that edge. The interpreter tries to move into that block next.&lt;/p&gt;
&lt;p&gt;If that block is a color other than black or white, the move succeeds. If it's black, the move fails and the interpreter changes the DP or CC and looks for a new block to try. If it's white, the interpreter slips over the white block until it hits a black wall or a non-black block.&lt;/p&gt;
&lt;h4&gt;Colors/Instructions&lt;/h4&gt;
&lt;p&gt;Once the interpreter has successfully moved from one block to another, it tries to execute an instruction. To figure out which instruction to execute, it compares the color of the old block with the color of the new block. The difference in hue and lightness between the two colors is determined, and those values are used to look up the instruction to execute. The interpreter tries to execute that instruction and the cycle begins again!&lt;/p&gt;
&lt;h1&gt;Pyet&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/jdherg/pyet"&gt;Pyet&lt;/a&gt; is my implementation of a Piet interpreter using the Python 3 standard library (with one notable exception).&lt;/p&gt;
&lt;h3&gt;Image cheat&lt;/h3&gt;
&lt;p&gt;Unfortunately, Python doesn't have an image handling module in the standard library. That's a pretty big obstacle when writing an interpreter for an image-based language! Rather than trying to re-implement image reading from scratch, I decided that it was within the spirit of the project to use a third-party library to turn the image into an equivalent text format before the actual interpreter got going. As a result my toy interpreter comes with a helper script to turn a Piet source file into a Pyet source file. I made it with Pillow, which made handling the popular image formats straightforward.&lt;/p&gt;
&lt;h3&gt;Program structure (Classes)&lt;/h3&gt;
&lt;p&gt;Pyet splits interpretation logic into four classes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;PietStack&lt;/strong&gt; which behaves as a stack and executes all of the stack-related operations Piet requires.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Per the Piet spec, the PietStack is designed to fail by opting not to perform operations that would throw exceptions. It accomplishes this by returning &lt;code&gt;None&lt;/code&gt; for pop operations that would fail and silently skipping stack manipulations that would be erroneous.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;SourceMap&lt;/strong&gt; which holds and annotates the Pyet representation of the Piet source being interpreted.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The annotation process splits the source into blocks and calculates information about those blocks for use in execution. More on this later.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;Navigator&lt;/strong&gt; which holds the SourceMap and uses it to determine which block the interpreter should move to next.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Navigator takes care of all of the navigation logic mentioned earlier: sliding across white spaces, turning when obstacles are encountered, and transitioning between blocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;strong&gt;Interpreter&lt;/strong&gt; which contains the PietStack and Navigator and uses them to interpret and execute the program.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Interpreter maintains the program's non-stack state and executes commands as required by movement between the blocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Interpretation&lt;/h3&gt;
&lt;p&gt;Pyet interpretation goes in three stages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initialization.&lt;/strong&gt; the Interpreter is instantiated, creating an empty PietStack and Navigator in turn. The Navigator creates a SourceMap and passes the source to it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Annotation.&lt;/strong&gt; As part of its initialization step, the SourceMap numbers and annotates the color blocks in the source file, saving information about block sizes and corner locations that will be useful for navigation and instruction execution later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Execution.&lt;/strong&gt; The interpreter starts in the top left corner and starts traversing the source, executing instructions as it transitions between blocks. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Annotation &amp;amp; the Fill Algorithm&lt;/h3&gt;
&lt;p&gt;In order to interpret a program, the interpreter has to know which block it's in, know how big the block is, and know where the exit points from the block are. I opted to preprocess the source file to give each block a number, then save annotations about the size and exit points of each block. As a result, for a given location and DP/CC combination, the Navigator can look up which block it's in and how to exit that block.&lt;/p&gt;
&lt;p&gt;To perform this preprocessing, I opted to run a simple flood fill algorithm over the source file. The SourceMap loops over each pixel in the source file, checking to see if that pixel already has already been assigned to a block and kicking off a flood fill at that location if not. The flood fill marks the pixel as visited, gives it a number, and adds the adjacent pixels of the same color to a queue. It works through that queue, giving those pixels the same number, marking them as visited, and adding same-colored pixels adjacent to them to the queue. When it runs out of pixels of the same color, the main loop continues on until it runs into another unfilled pixel.&lt;/p&gt;
&lt;p&gt;That accounts for the block separation, but we still need annotations for size and exits. Luckily, we can take care of those while visiting the pixels to number them! By keeping a map from block numbers to block sizes, we just have to add one to our record of a block's size every time we add a pixel to it. Similarly, by storing candidate exit points the same way we can simply check every new pixel as it is added to see if it should replace any of the candidate exit points of the same number.&lt;/p&gt;
&lt;h3&gt;Room for improvement&lt;/h3&gt;
&lt;p&gt;The one aspect of the Piet spec I didn't nail (or intentionally compromise on) is the question of reading user input. Piet provides for two input instructions, &lt;code&gt;in(char)&lt;/code&gt; and &lt;code&gt;in(number)&lt;/code&gt;. The specification indicates that the "in" command reads a value from STDIN as either a character or number, depending on the variant. While I was able to approximate appropriate input commands with sys.stdin.read, it's something I'd really like to revisit.&lt;/p&gt;
&lt;p&gt;In terms of Python best practices, there are also a couple of things lacking in Pyet. While the project is PEP8 compliant, it's not PEP257 compliant: there are no docstrings at all! It's also pretty short on tests: other than a few tests to help me make sure the PietStack worked appropriately, the project is in need of many more unit tests to reach 100% coverage. &lt;/p&gt;
&lt;h3&gt;Future Directions&lt;/h3&gt;
&lt;p&gt;Now that I've got a (mostly) functional Piet interpreter, there are a lot of fun enhancements I can make to it. Here are a few that jumped out at me immediately.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add another dimension: while the Piet instruction set and movement rules only account for travel along the x or y axis, most of it can be generalized to add another dimension without too much trouble. Anything that refers to block "area" now refers to block "volume" and when navigating there are now 8 possible directions (with 4 orientations each) rather than 4 possible directions (with 2 orientations each).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add new colors/instructions: The Piet instruction set includes eighteen non-special colors and a corresponding seventeen instructions (one for every transition a given color can make to any other color). By adding a new set of colors, room opens up for more instructions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow for configurable colors: While we're mucking about with the color sets, why not add configurable mappings between the actual image colors and the canonical Piet colors? Pyet uses a hardcoded list of what pixel colors map to which Piet colors and how the Piet colors are ordered, but by making those mappings configurable we can make programs with whatever twenty shades we want.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a transition graph: by annotating the source with the transition points between blocks, we're just one step away from being able to create a graph with the blocks as nodes and transitions as edges. Attach labels with the appropriate commands during each transition, and it might be possible to identify optimizations in the program or translate it to other languages.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's clear that there's still a lot of potential in this project, and I have a feeling I'll be returning to it over time as I learn more about Python best practices and relevant design patterns. In the meantime I'm pleased to have put together a fun programmable toy from start to finish.&lt;/p&gt;</summary><category term="Programming"></category><category term="Projects"></category><category term="Python"></category></entry><entry><title>Hello, World</title><link href="http://dev.jdherg.com/posts/2014/11/20/hello-world/" rel="alternate"></link><updated>2014-11-20T23:30:00-06:00</updated><author><name></name></author><id>tag:dev.jdherg.com,2014-11-20:posts/2014/11/20/hello-world/</id><summary type="html">&lt;p&gt;I'm a blogger again!&lt;/p&gt;
&lt;h3&gt;Why blog?&lt;/h3&gt;
&lt;p&gt;I've been working on being a better programmer and a better member of the programming community. So far, that process has been mostly passive and mostly private: reading articles, watching talk videos, keeping an eye on Twitter, and being a quiet member of the crowd at meetups. There have been exceptions, though, and they've been rewarding: I attended my first PyCon this year, and that experience prompted me to volunteer for the PyCon 2015 Programming Committee. With this blog, I hope to step even further toward actively and publicly exploring new concepts and improving myself as a programmer.&lt;/p&gt;
&lt;h3&gt;Why not blog earlier?&lt;/h3&gt;
&lt;p&gt;It's been nearly a decade since I last maintained a blog.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; I've spent a lot of the intervening time telling myself I should start blogging again, but I've always been able to come up with excuses not to. That stops now. Here, broadly, so I can't use them again, are those excuses in Q&amp;amp;A form:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What if the blog isn't useful?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Even if no one else ever reads it, it will be useful to me! A blog is a good chance to practice writing and the process will force me to organize my thoughts on topics I write about. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What if I'm bad at programming?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I've been programming professionally for the three years since I graduated without complaint about my technical ability. At worst, I'm an adequate programmer. Beyond that, this blog will help document my programming exploration and growth. The companies I'm interested will value capacity for growth and thoughtful exploration.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What if I'm bad at writing?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writing regularly for the blog will be great practice. Fingers crossed, bad writing now will only make my progress even more exciting later!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;del&gt;Failing&lt;/del&gt; Growing in Public&lt;/h3&gt;
&lt;p&gt;Even having discarded those excuses not to blog, making a record of my journey through programming is a little intimidating.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; It's important to remember that it's OK to fail, and that &lt;a href="https://www.khanacademy.org/youcanlearnanything"&gt;failure is just a part of the growth process&lt;/a&gt;. Failure and frustration&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; can be a good sign that I'm trying things that are good challenges!&lt;/p&gt;
&lt;p&gt;So that's really what this blog is for: to practice writing and reflecting while I practice programming, and above all to publicly practice thinking of challenges and failures as opportunities for growth. I hope you have as much fun with it as I will.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I'm not counting Facebook or Twitter. Sorry.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Or terrifying, depending on the hour.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Within reason! Avoiding burnout is important, too.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Meta"></category></entry></feed>