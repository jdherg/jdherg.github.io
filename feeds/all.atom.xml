<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>John Hergenroeder</title><link href="http://jdherg.github.io/" rel="alternate"></link><link href="http://jdherg.github.io/feeds/all.atom.xml" rel="self"></link><id>http://jdherg.github.io/</id><updated>2014-11-21T09:00:00-06:00</updated><entry><title>Pyet</title><link href="http://jdherg.github.io/posts/2014/11/21/pyet/" rel="alternate"></link><updated>2014-11-21T09:00:00-06:00</updated><author><name></name></author><id>tag:jdherg.github.io,2014-11-21:posts/2014/11/21/pyet/</id><summary type="html">&lt;p&gt;This month I was hunting for a fun Python project I could get done with just the standard library when I read &lt;a href="http://jennmoney.biz/"&gt;Jenn Schiffer&lt;/a&gt;'s &lt;a href="http://vart.institute/mondrian/index.html"&gt;vart.institute article on Piet Mondrian&lt;/a&gt;. The article linked to the &lt;a href="http://www.dangermouse.net/esoteric/piet.html"&gt;Piet Programming Language&lt;/a&gt;. With a limited set of instructions and equally limited state (a source file, a stack, and a few other variables), a toy Piet interpreter in Python sounded like a great fit for my goal!&lt;/p&gt;
&lt;h1&gt;Piet&lt;/h1&gt;
&lt;p&gt;Named after Piet Mondrian, Piet is a language crafted by &lt;a href="http://www.dangermouse.net/"&gt;David Morgan-Mar&lt;/a&gt; that uses abstract art as source code. You can find a thorough discussion of the language at the &lt;a href="http://www.dangermouse.net/esoteric/piet.html"&gt;official Piet page&lt;/a&gt;, but I'll try to sum it up briefly.&lt;/p&gt;
&lt;h3&gt;Execution&lt;/h3&gt;
&lt;p&gt;Piet programs are images treated as sets of discrete blocks of color. A Piet interpreter behaves like a robot traversing the surface of the image: it moves from block to block, executing commands depending on the colors of the blocks it is transitioning between.&lt;/p&gt;
&lt;h4&gt;Navigation&lt;/h4&gt;
&lt;p&gt;At each execution step, the interpreter has to decide which adjacent block to move to next.&lt;/p&gt;
&lt;p&gt;To make that decision, the interpreter uses three pieces of information: its current block, a &lt;em&gt;direction pointer (DP)&lt;/em&gt; that indicates which direction to move next, and a &lt;em&gt;codel chooser (CC)&lt;/em&gt; it uses to choose between blocks if there are multiple options adjacent to the current block in that direction.&lt;/p&gt;
&lt;p&gt;The interpreter first finds the edge of the current block which is furthest in the direction of the DP, then uses the CC to select a block adjacent to the current block on that edge. The interpreter tries to move into that block next.&lt;/p&gt;
&lt;p&gt;If that block is a color other than black or white, the move succeeds. If it's black, the move fails and the interpreter changes the DP or CC and looks for a new block to try. If it's white, the interpreter slips over the white block until it hits a black wall or a non-black block.&lt;/p&gt;
&lt;h4&gt;Colors/Instructions&lt;/h4&gt;
&lt;p&gt;Once the interpreter has successfully moved from one block to another, it tries to execute an instruction. To figure out which instruction to execute, it compares the color of the old block with the color of the new block. The difference in hue and lightness between the two colors is determined, and those values are used to look up the instruction to execute. The interpreter tries to execute that instruction and the cycle begins again!&lt;/p&gt;
&lt;h1&gt;Pyet&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/jdherg/pyet"&gt;Pyet&lt;/a&gt; is my implementation of a Piet interpreter using the Python 3 standard library (with one notable exception).&lt;/p&gt;
&lt;h3&gt;Image cheat&lt;/h3&gt;
&lt;p&gt;Unfortunately, Python doesn't have an image handling module in the standard library. That's a pretty big obstacle when writing an interpreter for an image-based language! Rather than trying to re-implement image reading from scratch, I decided that it was within the spirit of the project to use a third-party library to turn the image into an equivalent text format before the actual interpreter got going. As a result my toy interpreter comes with a helper script to turn a Piet source file into a Pyet source file. I made it with Pillow, which made handling the popular image formats straightforward.&lt;/p&gt;
&lt;h3&gt;Program structure (Classes)&lt;/h3&gt;
&lt;p&gt;Pyet splits interpretation logic into four classes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;PietStack&lt;/strong&gt; which behaves as a stack and executes all of the stack-related operations Piet requires.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Per the Piet spec, the PietStack is designed to fail by opting not to perform operations that would throw exceptions. It accomplishes this by returning &lt;code&gt;None&lt;/code&gt; for pop operations that would fail and silently skipping stack manipulations that would be erroneous.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;SourceMap&lt;/strong&gt; which holds and annotates the Pyet representation of the Piet source being interpreted.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The annotation process splits the source into blocks and calculates information about those blocks for use in execution. More on this later.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;Navigator&lt;/strong&gt; which holds the SourceMap and uses it to determine which block the interpreter should move to next.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Navigator takes care of all of the navigation logic mentioned earlier: sliding across white spaces, turning when obstacles are encountered, and transitioning between blocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;strong&gt;Interpreter&lt;/strong&gt; which contains the PietStack and Navigator and uses them to interpret and execute the program.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Interpreter maintains the program's non-stack state and executes commands as required by movement between the blocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Interpretation&lt;/h3&gt;
&lt;p&gt;Pyet interpretation goes in three stages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initialization.&lt;/strong&gt; the Interpreter is instantiated, creating an empty PietStack and Navigator in turn. The Navigator creates a SourceMap and passes the source to it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Annotation.&lt;/strong&gt; As part of its initialization step, the SourceMap numbers and annotates the color blocks in the source file, saving information about block sizes and corner locations that will be useful for navigation and instruction execution later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Execution.&lt;/strong&gt; The interpreter starts in the top left corner and starts traversing the source, executing instructions as it transitions between blocks. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Annotation &amp;amp; the Fill Algorithm&lt;/h3&gt;
&lt;p&gt;In order to interpret a program, the interpreter has to know which block it's in, know how big the block is, and know where the exit points from the block are. I opted to preprocess the source file to give each block a number, then save annotations about the size and exit points of each block. As a result, for a given location and DP/CC combination, the Navigator can look up which block it's in and how to exit that block.&lt;/p&gt;
&lt;p&gt;To perform this preprocessing, I opted to run a simple flood fill algorithm over the source file. The SourceMap loops over each pixel in the source file, checking to see if that pixel already has already been assigned to a block and kicking off a flood fill at that location if not. The flood fill marks the pixel as visited, gives it a number, and adds the adjacent pixels of the same color to a queue. It works through that queue, giving those pixels the same number, marking them as visited, and adding same-colored pixels adjacent to them to the queue. When it runs out of pixels of the same color, the main loop continues on until it runs into another unfilled pixel.&lt;/p&gt;
&lt;p&gt;That accounts for the block separation, but we still need annotations for size and exits. Luckily, we can take care of those while visiting the pixels to number them! By keeping a map from block numbers to block sizes, we just have to add one to our record of a block's size every time we add a pixel to it. Similarly, by storing candidate exit points the same way we can simply check every new pixel as it is added to see if it should replace any of the candidate exit points of the same number.&lt;/p&gt;
&lt;h3&gt;Room for improvement&lt;/h3&gt;
&lt;p&gt;The one aspect of the Piet spec I didn't nail (or intentionally compromise on) is the question of reading user input. Piet provides for two input instructions, &lt;code&gt;in(char)&lt;/code&gt; and &lt;code&gt;in(number)&lt;/code&gt;. The specification indicates that the "in" command reads a value from STDIN as either a character or number, depending on the variant. While I was able to approximate appropriate input commands with sys.stdin.read, it's something I'd really like to revisit.&lt;/p&gt;
&lt;p&gt;In terms of Python best practices, there are also a couple of things lacking in Pyet. While the project is PEP8 compliant, it's not PEP257 compliant: there are no docstrings at all! It's also pretty short on tests: other than a few tests to help me make sure the PietStack worked appropriately, the project is in need of many more unit tests to reach 100% coverage. &lt;/p&gt;
&lt;h3&gt;Future Directions&lt;/h3&gt;
&lt;p&gt;Now that I've got a (mostly) functional Piet interpreter, there are a lot of fun enhancements I can make to it. Here are a few that jumped out at me immediately.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add another dimension: while the Piet instruction set and movement rules only account for travel along the x or y axis, most of it can be generalized to add another dimension without too much trouble. Anything that refers to block "area" now refers to block "volume" and when navigating there are now 8 possible directions (with 4 orientations each) rather than 4 possible directions (with 2 orientations each).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add new colors/instructions: The Piet instruction set includes eighteen non-special colors and a corresponding seventeen instructions (one for every transition a given color can make to any other color). By adding a new set of colors, room opens up for more instructions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow for configurable colors: While we're mucking about with the color sets, why not add configurable mappings between the actual image colors and the canonical Piet colors? Pyet uses a hardcoded list of what pixel colors map to which Piet colors and how the Piet colors are ordered, but by making those mappings configurable we can make programs with whatever twenty shades we want.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a transition graph: by annotating the source with the transition points between blocks, we're just one step away from being able to create a graph with the blocks as nodes and transitions as edges. Attach labels with the appropriate commands during each transition, and it might be possible to identify optimizations in the program or translate it to other languages.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's clear that there's still a lot of potential in this project, and I have a feeling I'll be returning to it over time as I learn more about Python best practices and relevant design patterns. In the meantime I'm pleased to have put together a fun programmable toy from start to finish.&lt;/p&gt;</summary><category term="Programming"></category><category term="Projects"></category><category term="Python"></category></entry><entry><title>Hello, World</title><link href="http://jdherg.github.io/posts/2014/11/20/hello-world/" rel="alternate"></link><updated>2014-11-20T23:30:00-06:00</updated><author><name></name></author><id>tag:jdherg.github.io,2014-11-20:posts/2014/11/20/hello-world/</id><summary type="html">&lt;p&gt;I'm a blogger again!&lt;/p&gt;
&lt;h3&gt;Why blog?&lt;/h3&gt;
&lt;p&gt;I've been working on being a better programmer and a better member of the programming community. So far, that process has been mostly passive and mostly private: reading articles, watching talk videos, keeping an eye on Twitter, and being a quiet member of the crowd at meetups. There have been exceptions, though, and they've been rewarding: I attended my first PyCon this year, and that experience prompted me to volunteer for the PyCon 2015 Programming Committee. With this blog, I hope to step even further toward actively and publicly exploring new concepts and improving myself as a programmer.&lt;/p&gt;
&lt;h3&gt;Why not blog earlier?&lt;/h3&gt;
&lt;p&gt;It's been nearly a decade since I last maintained a blog.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; I've spent a lot of the intervening time telling myself I should start blogging again, but I've always been able to come up with excuses not to. That stops now. Here, broadly, so I can't use them again, are those excuses in Q&amp;amp;A form:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What if the blog isn't useful?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Even if no one else ever reads it, it will be useful to me! A blog is a good chance to practice writing and the process will force me to organize my thoughts on topics I write about. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What if I'm bad at programming?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I've been programming professionally for the three years since I graduated without complaint about my technical ability. At worst, I'm an adequate programmer. Beyond that, this blog will help document my programming exploration and growth. The companies I'm interested will value capacity for growth and thoughtful exploration.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What if I'm bad at writing?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writing regularly for the blog will be great practice. Fingers crossed, bad writing now will only make my progress even more exciting later!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;del&gt;Failing&lt;/del&gt; Growing in Public&lt;/h3&gt;
&lt;p&gt;Even having discarded those excuses not to blog, making a record of my journey through programming is a little intimidating.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; It's important to remember that it's OK to fail, and that &lt;a href="https://www.khanacademy.org/youcanlearnanything"&gt;failure is just a part of the growth process&lt;/a&gt;. Failure and frustration&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; can be a good sign that I'm trying things that are good challenges!&lt;/p&gt;
&lt;p&gt;So that's really what this blog is for: to practice writing and reflecting while I practice programming, and above all to publicly practice thinking of challenges and failures as opportunities for growth. I hope you have as much fun with it as I will.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I'm not counting Facebook or Twitter. Sorry.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Or terrifying, depending on the hour.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Within reason! Avoiding burnout is important, too.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Meta"></category></entry></feed>